#![allow(non_camel_case_types)]
use libc::{int32_t, uint32_t, int64_t, uint64_t, size_t};

/* automatically generated by rust-bindgen */

pub enum Struct_gbm_device { }
pub enum Struct_gbm_bo { }
pub enum Struct_gbm_surface { }
#[repr(C)]
#[derive(Copy)]
pub struct Union_gbm_bo_handle {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_gbm_bo_handle {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s32(&mut self) -> *mut int32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u32(&mut self) -> *mut uint32_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn s64(&mut self) -> *mut int64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn u64(&mut self) -> *mut uint64_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_gbm_bo_handle {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_gbm_bo_handle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_gbm_bo_format = ::libc::c_uint;
pub const GBM_BO_FORMAT_XRGB8888: ::libc::c_uint = 0;
pub const GBM_BO_FORMAT_ARGB8888: ::libc::c_uint = 1;
pub type Enum_gbm_bo_flags = ::libc::c_uint;
pub const GBM_BO_USE_SCANOUT: ::libc::c_uint = 1;
pub const GBM_BO_USE_CURSOR: ::libc::c_uint = 2;
pub const GBM_BO_USE_CURSOR_64X64: ::libc::c_uint = 2;
pub const GBM_BO_USE_RENDERING: ::libc::c_uint = 4;
pub const GBM_BO_USE_WRITE: ::libc::c_uint = 8;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_gbm_import_fd_data {
    pub fd: ::libc::c_int,
    pub width: uint32_t,
    pub height: uint32_t,
    pub stride: uint32_t,
    pub format: uint32_t,
}
impl ::std::clone::Clone for Struct_gbm_import_fd_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_gbm_import_fd_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "gbm")]
extern "C" {
    pub fn gbm_device_get_fd(gbm: *mut Struct_gbm_device) -> ::libc::c_int;
    pub fn gbm_device_get_backend_name(gbm: *mut Struct_gbm_device)
     -> *const ::libc::c_char;
    pub fn gbm_device_is_format_supported(gbm: *mut Struct_gbm_device,
                                          format: uint32_t, usage: uint32_t)
     -> ::libc::c_int;
    pub fn gbm_device_destroy(gbm: *mut Struct_gbm_device) -> ();
    pub fn gbm_create_device(fd: ::libc::c_int) -> *mut Struct_gbm_device;
    pub fn gbm_bo_create(gbm: *mut Struct_gbm_device, width: uint32_t,
                         height: uint32_t, format: uint32_t, flags: uint32_t)
     -> *mut Struct_gbm_bo;
    pub fn gbm_bo_import(gbm: *mut Struct_gbm_device, _type: uint32_t,
                         buffer: *mut ::libc::c_void, usage: uint32_t)
     -> *mut Struct_gbm_bo;
    pub fn gbm_bo_get_width(bo: *mut Struct_gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_height(bo: *mut Struct_gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_stride(bo: *mut Struct_gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_format(bo: *mut Struct_gbm_bo) -> uint32_t;
    pub fn gbm_bo_get_device(bo: *mut Struct_gbm_bo)
     -> *mut Struct_gbm_device;
    pub fn gbm_bo_get_handle(bo: *mut Struct_gbm_bo) -> Union_gbm_bo_handle;
    pub fn gbm_bo_get_fd(bo: *mut Struct_gbm_bo) -> ::libc::c_int;
    pub fn gbm_bo_write(bo: *mut Struct_gbm_bo, buf: *const ::libc::c_void,
                        count: size_t) -> ::libc::c_int;
    pub fn gbm_bo_set_user_data(bo: *mut Struct_gbm_bo,
                                data: *mut ::libc::c_void,
                                destroy_user_data:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut Struct_gbm_bo,
                                                                        arg2:
                                                                            *mut ::libc::c_void)
                                                              -> ()>) -> ();
    pub fn gbm_bo_get_user_data(bo: *mut Struct_gbm_bo)
     -> *mut ::libc::c_void;
    pub fn gbm_bo_destroy(bo: *mut Struct_gbm_bo) -> ();
    pub fn gbm_surface_create(gbm: *mut Struct_gbm_device, width: uint32_t,
                              height: uint32_t, format: uint32_t,
                              flags: uint32_t) -> *mut Struct_gbm_surface;
    pub fn gbm_surface_needs_lock_front_buffer(surface:
                                                   *mut Struct_gbm_surface)
     -> ::libc::c_int;
    pub fn gbm_surface_lock_front_buffer(surface: *mut Struct_gbm_surface)
     -> *mut Struct_gbm_bo;
    pub fn gbm_surface_release_buffer(surface: *mut Struct_gbm_surface,
                                      bo: *mut Struct_gbm_bo) -> ();
    pub fn gbm_surface_has_free_buffers(surface: *mut Struct_gbm_surface)
     -> ::libc::c_int;
    pub fn gbm_surface_destroy(surface: *mut Struct_gbm_surface) -> ();
}
